mport React, { useState, useRef, useEffect } from 'react';
import { StyleSheet, Text, View, Animated } from 'react-native';
import Slider from '@react-native-community/slider';

const ELECTROLYSIS_THRESHOLD = 2;

const App: React.FC = () => {
  const [voltage, setVoltage] = useState<number>(0);
  const [current, setCurrent] = useState<number>(0);

  return (
    <View style={styles.container}>
      <Simulator voltage={voltage} current={current} />
      <BatteryControl 
        voltage={voltage} 
        current={current} 
        setVoltage={setVoltage} 
        setCurrent={setCurrent} 
      />
    </View>
  );
};

interface SimulatorProps {
  voltage: number;
  current: number;
}

const Simulator: React.FC<SimulatorProps> = ({ voltage, current }) => {
  // Dacă tensiunea este mai mare sau egală cu pragul, pornește electroliza
  const showElectrolysis = voltage >= ELECTROLYSIS_THRESHOLD;
  // Durata animației bulelor depinde de intensitatea curentului (în milisecunde)
  const bubbleAnimationDuration = current > 0 ? Math.max(1000, 5000 - current * 250) : 5000;

  return (
    <View style={styles.simulator}>
      <View style={styles.beaker}>
        <View style={styles.water}>
          <View style={styles.electrodeLeft}>
            {showElectrolysis && <Bubbles duration={bubbleAnimationDuration} />}
          </View>
          <View style={styles.electrodeRight}>
            {showElectrolysis && <Bubbles duration={bubbleAnimationDuration} />}
          </View>
        </View>
      </View>
    </View>
  );
};

interface BubblesProps {
  duration: number;
}

const Bubbles: React.FC<BubblesProps> = ({ duration }) => {
  const bubbleCount = 5;
  return (
    <View style={styles.bubblesContainer}>
      {Array.from({ length: bubbleCount }).map((_, i) => (
        <Bubble key={i} duration={duration} delay={i * (duration / bubbleCount)} />
      ))}
    </View>
  );
};

interface BubbleProps {
  duration: number;
  delay: number;
}

const Bubble: React.FC<BubbleProps> = ({ duration, delay }) => {
  const translateY = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    const animate = () => {
      translateY.setValue(0);
      Animated.sequence([
        Animated.delay(delay),
        Animated.timing(translateY, {
          toValue: -100,
          duration: duration,
          useNativeDriver: true,
        }),
      ]).start(() => animate());
    };
    animate();
  }, [duration, delay, translateY]);

  return (
    <Animated.View style={[styles.bubble, { transform: [{ translateY }] }]} />
  );
};

interface BatteryControlProps {
  voltage: number;
  current: number;
  setVoltage: (v: number) => void;
  setCurrent: (c: number) => void;
}

const BatteryControl: React.FC<BatteryControlProps> = ({ voltage, current, setVoltage, setCurrent }) => {
  return (
    <View style={styles.batteryControl}>
      <Text style={styles.batteryTitle}>Acumulator DC</Text>
      <View style={styles.controlGroup}>
        <Text>Voltage (V): {voltage.toFixed(1)}</Text>
        <Slider
          style={styles.slider}
          minimumValue={0}
          maximumValue={10}
          step={0.1}
          value={voltage}
          onValueChange={setVoltage}
        />
      </View>
      <View style={styles.controlGroup}>
        <Text>Curent (A): {current.toFixed(1)}</Text>
        <Slider
          style={styles.slider}
          minimumValue={0}
          maximumValue={10}
          step={0.1}
          value={current}
          onValueChange={setCurrent}
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  simulator: {
    width: 300,
    height: 400,
    borderWidth: 2,
    borderColor: '#000',
    marginBottom: 20,
  },
  beaker: {
    flex: 8,
    borderWidth: 2,
    borderColor: '#000',
    borderBottomWidth: 0,
    overflow: 'hidden',
  },
  water: {
    flex: 1,
    backgroundColor: '#a0d8ef',
    justifyContent: 'flex-end',
    position: 'relative',
  },
  electrodeLeft: {
    position: 'absolute',
    left: '20%',
    bottom: 10,
    width: 10,
    height: 50,
    backgroundColor: '#555',
  },
  electrodeRight: {
    position: 'absolute',
    right: '20%',
    bottom: 10,
    width: 10,
    height: 50,
    backgroundColor: '#555',
  },
  bubblesContainer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    height: '100%',
  },
  bubble: {
    position: 'absolute',
    left: '50%',
    width: 8,
    height: 8,
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    borderRadius: 4,
  },
  batteryControl: {
    width: 300,
    padding: 10,
    borderWidth: 2,
    borderColor: '#000',
    backgroundColor: '#f4f4f4',
  },
  batteryTitle: {
    textAlign: 'center',
    fontSize: 18,
    marginBottom: 10,
  },
  controlGroup: {
    marginVertical: 10,
  },
  slider: {
    width: '100%',
    height: 40,
  },
});

export default App;

